name: Issue Management (Test Version)

on:
  schedule:
    - cron: '* * * * *' # Run every minutes
  workflow_dispatch: # Allow manual trigger

jobs:
  manage-issues:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Manage inactive issues
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            const twoMinutesAgo = new Date(Date.now() - 2 * 60 * 1000);
            const threeMinutesAgo = new Date(Date.now() - 3 * 60 * 1000);
            const botLogin = 'github-actions[bot]';

            const issues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              state: 'open',
              assignee: '*'
            });

            for (const issue of issues.data) {
              const comments = await github.rest.issues.listComments({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number
              });

              const lastNonBotActivity = new Date(Math.max(
                ...comments.data
                  .filter(comment => comment.user.login !== botLogin)
                  .map(comment => new Date(comment.created_at)),
                new Date(issue.created_at)
              ));

              if (lastNonBotActivity < threeMinutesAgo) {
                // Unassign immediately if inactive for 3 minutes
                if (issue.assignees.length > 0) {
                  await github.rest.issues.removeAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    assignees: issue.assignees.map(a => a.login)
                  });

                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: 'This issue has been inactive for 3 minutes and has been unassigned. Feel free to pick it up again when you\'re ready to work on it.'
                  });
                }
              } else if (lastNonBotActivity < twoMinutesAgo) {
                // Warning if inactive for 2 minutes
                const warningAlreadyGiven = comments.data.some(comment =>
                  comment.user.login === botLogin &&
                  comment.body.includes('This issue has been inactive for 2 minutes')
                );

                if (!warningAlreadyGiven) {
                  await github.rest.issues.createComment({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issue.number,
                    body: 'This issue has been inactive for 2 minutes. Please provide an update or it may be unassigned in 1 minute.'
                  });
                }
              }
            }
